{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","id","imgId","this","props","toString","length","imgLink","className","data-testid","name","src","alt","type","experience","Component","Pokedex","winLose","isWinner","total","pokemons","map","pokemon","Pokegame","group1","group2","index","Math","floor","random","randomPokemon","splice","push","totalEXP1","reduce","totalEXP2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSA0BeA,E,uKAfX,IARcC,EAQVC,EANW,IADjBD,GADgBA,EAQOE,KAAKC,MAAMH,IAP1BI,YACDC,OAAmB,KAAN,OAAYL,GACf,GAAbA,EAAGK,OAAmB,IAAN,OAAWL,GACd,GAAbA,EAAGK,OAAmB,GAAN,OAAUL,QAA9B,EAKIM,EAAO,oEAAgEL,EAAhE,QACT,OACE,yBAAKM,UAAU,YACb,wBAAIC,cAAY,SAAhB,IAA0BN,KAAKC,MAAMM,KAArC,KACA,yBAAKF,UAAU,gBACb,yBAAKG,IAAKJ,EAASK,IAAKT,KAAKC,MAAMM,QAErC,uBAAGF,UAAU,iBAAb,UAAqCL,KAAKC,MAAMS,MAChD,0BAAML,UAAU,iBAAhB,SAAuCL,KAAKC,MAAMU,WAAlD,U,GAXeC,aCwBRC,G,6KA3BX,IAAIC,EAMJ,OAJEA,EADEd,KAAKC,MAAMc,SACH,wBAAIV,UAAU,kBAAd,mBAEA,wBAAIA,UAAU,iBAAd,kBAGV,yBAAKA,UAAU,WACZS,EACD,wBAAIT,UAAU,iBAAd,sBAAkDL,KAAKC,MAAMe,OAC7D,yBAAKX,UAAU,iBACZL,KAAKC,MAAMgB,SAASC,KAAI,SAACC,GACxB,OACE,kBAAC,EAAD,CACErB,GAAIqB,EAAQrB,GACZS,KAAMY,EAAQZ,KACdG,KAAMS,EAAQT,KACdC,WAAYQ,EAAQR,sB,GAnBdC,cCDhBQ,E,uKAgBF,IAFA,IAAIC,EAAS,GACXC,EAAM,YAAOtB,KAAKC,MAAMgB,UACnBI,EAAOlB,OAASmB,EAAOnB,QAAQ,CACpC,IAAIoB,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOnB,QAC5CwB,EAAgBL,EAAOM,OAAOL,EAAO,GAAG,GAC1CF,EAAOQ,KAAKF,GAEd,IAAIG,EAAYT,EAAOU,QACrB,SAACf,EAAOC,GAAR,OAAqBD,EAAQC,EAASN,aACtC,GAEEqB,EAAYV,EAAOS,QACrB,SAACf,EAAOC,GAAR,OAAqBD,EAAQC,EAASN,aACtC,GAEF,OACE,6BACE,kBAAC,EAAD,CACEM,SAAUI,EACVL,MAAOc,EACPf,SAAUe,EAAYE,IAExB,kBAAC,EAAD,CACEf,SAAUK,EACVN,MAAOgB,EACPjB,SAAUiB,EAAYF,S,GAvCTlB,aAAjBQ,EACGa,aAAe,CACpBhB,SAAU,CACR,CAAEnB,GAAI,EAAGS,KAAM,aAAcG,KAAM,OAAQC,WAAY,IACvD,CAAEb,GAAI,EAAGS,KAAM,WAAYG,KAAM,QAASC,WAAY,IACtD,CAAEb,GAAI,GAAIS,KAAM,UAAWG,KAAM,MAAOC,WAAY,IACpD,CAAEb,GAAI,GAAIS,KAAM,aAAcG,KAAM,SAAUC,WAAY,KAC1D,CAAEb,GAAI,GAAIS,KAAM,UAAWG,KAAM,WAAYC,WAAY,KACzD,CAAEb,GAAI,GAAIS,KAAM,aAAcG,KAAM,SAAUC,WAAY,IAC1D,CAAEb,GAAI,GAAIS,KAAM,SAAUG,KAAM,SAAUC,WAAY,KACtD,CAAEb,GAAI,IAAKS,KAAM,QAASG,KAAM,SAAUC,WAAY,MAoC7CS,QCtCAc,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCMc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56f57e4e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Pokecard.css\";\r\n\r\nfunction formatId(id) {\r\n  id = id.toString();\r\n  if (id.length == 1) return `00${id}`;\r\n  if (id.length == 2) return `0${id}`;\r\n  if (id.length == 3) return `${id}`;\r\n}\r\nclass Pokecard extends Component {\r\n  render() {\r\n    let imgId = formatId(this.props.id),\r\n      imgLink = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${imgId}.png`;\r\n    return (\r\n      <div className=\"Pokecard\">\r\n        <h2 data-testid=\"title\"> {this.props.name} </h2>\r\n        <div className=\"Pokecard-img\">\r\n          <img src={imgLink} alt={this.props.name} />\r\n        </div>\r\n        <p className=\"Pokecard-data\">Type : {this.props.type}</p>\r\n        <span className=\"Pokecard-data\">EXP : {this.props.experience} </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { Component } from \"react\";\r\nimport Pokecard from \"./Pokecard\";\r\nimport \"./Pokedex.css\";\r\n\r\nclass Pokedex extends Component {\r\n  render() {\r\n    let winLose;\r\n    if (this.props.isWinner) {\r\n      winLose = <h1 className=\"Pokedex-winner\">Winning Group !</h1>;\r\n    } else {\r\n      winLose = <h1 className=\"Pokedex-loser\">Losing Group !</h1>;\r\n    }\r\n    return (\r\n      <div className=\"Pokedex\">\r\n        {winLose}\r\n        <h2 className=\"Pokedex-total\">Total Experience : {this.props.total}</h2>\r\n        <div className=\"Pokedex-cards\">\r\n          {this.props.pokemons.map((pokemon) => {\r\n            return (\r\n              <Pokecard\r\n                id={pokemon.id}\r\n                name={pokemon.name}\r\n                type={pokemon.type}\r\n                experience={pokemon.experience}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokedex;\r\n","import React, { Component } from \"react\";\r\nimport Pokedex from \"./Pokedex\";\r\n\r\nclass Pokegame extends Component {\r\n  static defaultProps = {\r\n    pokemons: [\r\n      { id: 4, name: \"Charmander\", type: \"fire\", experience: 62 },\r\n      { id: 7, name: \"Squirtle\", type: \"water\", experience: 63 },\r\n      { id: 11, name: \"Metapod\", type: \"bug\", experience: 72 },\r\n      { id: 12, name: \"Butterfree\", type: \"flying\", experience: 178 },\r\n      { id: 25, name: \"Pikachu\", type: \"electric\", experience: 112 },\r\n      { id: 39, name: \"Jigglypuff\", type: \"normal\", experience: 95 },\r\n      { id: 94, name: \"Gengar\", type: \"poison\", experience: 225 },\r\n      { id: 133, name: \"Eevee\", type: \"normal\", experience: 65 },\r\n    ],\r\n  };\r\n  render() {\r\n    let group1 = [],\r\n      group2 = [...this.props.pokemons];\r\n    while (group1.length < group2.length) {\r\n      let index = Math.floor(Math.random() * group2.length),\r\n        randomPokemon = group2.splice(index, 1)[0]; // here splice returns array and push adds element that's why we used square brackets (0 means the first element in the array)\r\n      group1.push(randomPokemon);\r\n    }\r\n    let totalEXP1 = group1.reduce(\r\n      (total, pokemons) => total + pokemons.experience,\r\n      0\r\n    );\r\n    let totalEXP2 = group2.reduce(\r\n      (total, pokemons) => total + pokemons.experience,\r\n      0\r\n    );\r\n    return (\r\n      <div>\r\n        <Pokedex\r\n          pokemons={group1}\r\n          total={totalEXP1}\r\n          isWinner={totalEXP1 > totalEXP2}\r\n        />\r\n        <Pokedex\r\n          pokemons={group2}\r\n          total={totalEXP2}\r\n          isWinner={totalEXP2 > totalEXP1}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokegame;\r\n","import React from \"react\";\r\nimport Pokegame from \"./Pokegame\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Pokegame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}